{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    executeSchedule(subscriber, scheduler, function () {\n      iterator = input[Symbol_iterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        var _a;\n\n        var value;\n        var done;\n\n        try {\n          _a = iterator.next(), value = _a.value, done = _a.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n        }\n      }, 0, true);\n    });\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAT,QAA2B,oBAA3B;AACA,SAAS,eAAT,QAAgC,yBAAhC;AAOA,OAAM,SAAU,gBAAV,CAA8B,KAA9B,EAAkD,SAAlD,EAA0E;AAC9E,SAAO,IAAI,UAAJ,CAAkB,UAAC,UAAD,EAAW;AAClC,QAAI,QAAJ;AAKA,IAAA,eAAe,CAAC,UAAD,EAAa,SAAb,EAAwB,YAAA;AAErC,MAAA,QAAQ,GAAI,KAAa,CAAC,eAAD,CAAb,EAAZ;AAEA,MAAA,eAAe,CACb,UADa,EAEb,SAFa,EAGb,YAAA;;;AACE,YAAI,KAAJ;AACA,YAAI,IAAJ;;AACA,YAAI;AAED,UAAA,EAAA,GAAkB,QAAQ,CAAC,IAAT,EAAlB,EAAE,KAAK,GAAA,EAAA,CAAA,KAAP,EAAS,IAAI,GAAA,EAAA,CAAA,IAAd;AACD,SAHD,CAGE,OAAO,GAAP,EAAY;AAEZ,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACA;AACD;;AAED,YAAI,IAAJ,EAAU;AAKR,UAAA,UAAU,CAAC,QAAX;AACD,SAND,MAMO;AAEL,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD;AACF,OAzBY,EA0Bb,CA1Ba,EA2Bb,IA3Ba,CAAf;AA6BD,KAjCc,CAAf;AAuCA,WAAO,YAAA;AAAM,aAAA,UAAU,CAAC,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAAX,CAAV,IAAgC,QAAQ,CAAxC,MAAgC,EAAhC;AAAiD,KAA9D;AACD,GA9CM,CAAP;AA+CD","sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}