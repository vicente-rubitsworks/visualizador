{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return innerFrom(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return operate(function (source, subscriber) {\n    var index = 0;\n    var innerSub = null;\n    var isComplete = false;\n    source.subscribe(createOperatorSubscriber(subscriber, function (outerValue) {\n      if (!innerSub) {\n        innerSub = createOperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        });\n        innerFrom(project(outerValue, index++)).subscribe(innerSub);\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\operators\\exhaustMap.ts"],"names":[],"mappings":"AAGA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AA8DA,OAAM,SAAU,UAAV,CACJ,OADI,EAEJ,cAFI,EAEyG;AAE7G,MAAI,cAAJ,EAAoB;AAElB,WAAO,UAAC,MAAD,EAAsB;AAC3B,aAAA,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,eAAA,SAAS,CAAC,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAT,CAAyB,IAAzB,CAA8B,GAAG,CAAC,UAAC,CAAD,EAAS,EAAT,EAAgB;AAAK,iBAAA,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAd,EAAc,CAAd;AAAvD,SAAiC,CAAjC,CAAA;AAAoF,OAA/F,CAAtB,CAAA;AAAuH,KADzH;AAED;;AACD,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAQ,GAAyB,IAArC;AACA,QAAI,UAAU,GAAG,KAAjB;AACA,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,UAAD,EAAW;AACT,UAAI,CAAC,QAAL,EAAe;AACb,QAAA,QAAQ,GAAG,wBAAwB,CAAC,UAAD,EAAa,SAAb,EAAwB,YAAA;AACzD,UAAA,QAAQ,GAAG,IAAX;AACA,UAAA,UAAU,IAAI,UAAU,CAAC,QAAX,EAAd;AACD,SAHkC,CAAnC;AAIA,QAAA,SAAS,CAAC,OAAO,CAAC,UAAD,EAAa,KAAK,EAAlB,CAAR,CAAT,CAAwC,SAAxC,CAAkD,QAAlD;AACD;AACF,KAVqB,EAWtB,YAAA;AACE,MAAA,UAAU,GAAG,IAAb;AACA,OAAC,QAAD,IAAa,UAAU,CAAC,QAAX,EAAb;AACD,KAdqB,CAD1B;AAkBD,GAtBa,CAAd;AAuBD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n *\n * Run a finite timer for each click, only if there is no currently active timer\n *\n * ```ts\n * import { fromEvent, exhaustMap, interval, take } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap(() => interval(1000).pipe(take(5)))\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable containing projected\n * Observables of each item of the source, ignoring projected Observables that\n * start before their preceding Observable has completed.\n */\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) =>\n      source.pipe(exhaustMap((a, i) => innerFrom(project(a, i)).pipe(map((b: any, ii: any) => resultSelector(a, b, i, ii)))));\n  }\n  return operate((source, subscriber) => {\n    let index = 0;\n    let innerSub: Subscriber<T> | null = null;\n    let isComplete = false;\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (outerValue) => {\n          if (!innerSub) {\n            innerSub = createOperatorSubscriber(subscriber, undefined, () => {\n              innerSub = null;\n              isComplete && subscriber.complete();\n            });\n            innerFrom(project(outerValue, index++)).subscribe(innerSub);\n          }\n        },\n        () => {\n          isComplete = true;\n          !innerSub && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}