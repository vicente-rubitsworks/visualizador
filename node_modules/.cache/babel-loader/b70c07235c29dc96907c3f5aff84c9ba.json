{"ast":null,"code":"import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    var isRoot = !context;\n\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n\n    cb();\n\n    if (isRoot) {\n      var _a = context,\n          errorThrown = _a.errorThrown,\n          error = _a.error;\n      context = null;\n\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\nexport function captureError(err) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\util\\errorContext.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,WAAvB;AAEA,IAAI,OAAO,GAAgD,IAA3D;AASA,OAAM,SAAU,YAAV,CAAuB,EAAvB,EAAqC;AACzC,MAAI,MAAM,CAAC,qCAAX,EAAkD;AAChD,QAAM,MAAM,GAAG,CAAC,OAAhB;;AACA,QAAI,MAAJ,EAAY;AACV,MAAA,OAAO,GAAG;AAAE,QAAA,WAAW,EAAE,KAAf;AAAsB,QAAA,KAAK,EAAE;AAA7B,OAAV;AACD;;AACD,IAAA,EAAE;;AACF,QAAI,MAAJ,EAAY;AACJ,UAAA,EAAA,GAAyB,OAAzB;AAAA,UAAE,WAAW,GAAA,EAAA,CAAA,WAAb;AAAA,UAAe,KAAK,GAAA,EAAA,CAAA,KAApB;AACN,MAAA,OAAO,GAAG,IAAV;;AACA,UAAI,WAAJ,EAAiB;AACf,cAAM,KAAN;AACD;AACF;AACF,GAbD,MAaO;AAGL,IAAA,EAAE;AACH;AACF;AAMD,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAA+B;AACnC,MAAI,MAAM,CAAC,qCAAP,IAAgD,OAApD,EAA6D;AAC3D,IAAA,OAAO,CAAC,WAAR,GAAsB,IAAtB;AACA,IAAA,OAAO,CAAC,KAAR,GAAgB,GAAhB;AACD;AACF","sourcesContent":["import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}