{"ast":null,"code":"export function createInvalidObservableTypeError(input) {\n  return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\util\\throwUnobservableError.ts"],"names":[],"mappings":"AAIA,OAAM,SAAU,gCAAV,CAA2C,KAA3C,EAAqD;AAEzD,SAAO,IAAI,SAAJ,CACL,mBACE,KAAK,KAAK,IAAV,IAAkB,OAAO,KAAP,KAAiB,QAAnC,GAA8C,mBAA9C,GAAoE,MAAI,KAAJ,GAAS,GAD/E,IACkF,0HAF7E,CAAP;AAKD","sourcesContent":["/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}