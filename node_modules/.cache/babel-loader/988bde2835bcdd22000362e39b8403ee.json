{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.closed = false;\n    _this.currentObservers = null;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  };\n\n  Subject.prototype.next = function (value) {\n    var _this = this;\n\n    errorContext(function () {\n      var e_1, _a;\n\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        if (!_this.currentObservers) {\n          _this.currentObservers = Array.from(_this.observers);\n        }\n\n        try {\n          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var observer = _c.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n\n  Subject.prototype.error = function (err) {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n\n  Subject.prototype.complete = function () {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  };\n\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function () {\n      var _a;\n\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return this._innerSubscribe(subscriber);\n  };\n\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _this = this;\n\n    var _a = this,\n        hasError = _a.hasError,\n        isStopped = _a.isStopped,\n        observers = _a.observers;\n\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(function () {\n      _this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  };\n\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nexport { Subject };\n\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexport { AnonymousSubject };","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\Subject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}