{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n\n    var _loop_1 = function (sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\observable\\zip.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,wBAAT,QAAyC,iCAAzC;AACA,SAAS,iBAAT,QAAkC,cAAlC;AA4CA,OAAM,SAAU,GAAV,GAAa;AAAC,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAkB;AAAlB,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAClB,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,CAAxC;AAEA,MAAM,OAAO,GAAG,cAAc,CAAC,IAAD,CAA9B;AAEA,SAAO,OAAO,CAAC,MAAR,GACH,IAAI,UAAJ,CAA0B,UAAC,UAAD,EAAW;AAGnC,QAAI,OAAO,GAAgB,OAAO,CAAC,GAAR,CAAY,YAAA;AAAM,aAAA,EAAA;AAAE,KAApB,CAA3B;AAKA,QAAI,SAAS,GAAG,OAAO,CAAC,GAAR,CAAY,YAAA;AAAM,aAAA,KAAA;AAAK,KAAvB,CAAhB;AAGA,IAAA,UAAU,CAAC,GAAX,CAAe,YAAA;AACb,MAAA,OAAO,GAAG,SAAS,GAAG,IAAtB;AACD,KAFD;;4BAOS,W,EAAW;AAClB,MAAA,SAAS,CAAC,OAAO,CAAC,WAAD,CAAR,CAAT,CAAgC,SAAhC,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAM;AACJ,QAAA,OAAO,CAAC,WAAD,CAAP,CAAqB,IAArB,CAA0B,KAA1B;;AAIA,YAAI,OAAO,CAAC,KAAR,CAAc,UAAC,MAAD,EAAO;AAAK,iBAAA,MAAM,CAAN,MAAA;AAAa,SAAvC,CAAJ,EAA8C;AAC5C,cAAM,MAAM,GAAQ,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD,EAAO;AAAK,mBAAA,MAAM,CAAN,KAAA,EAAA;AAAe,WAAvC,CAApB;AAEA,UAAA,UAAU,CAAC,IAAX,CAAgB,cAAc,GAAG,cAAc,CAAA,KAAd,CAAc,KAAA,CAAd,EAAc,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,MAAJ,CAAA,CAAd,CAAH,GAA+B,MAA7D;;AAIA,cAAI,OAAO,CAAC,IAAR,CAAa,UAAC,MAAD,EAAS,CAAT,EAAU;AAAK,mBAAA,CAAC,MAAM,CAAC,MAAR,IAAkB,SAAS,CAA3B,CAA2B,CAA3B;AAA8B,WAA1D,CAAJ,EAAiE;AAC/D,YAAA,UAAU,CAAC,QAAX;AACD;AACF;AACF,OAlBqB,EAmBtB,YAAA;AAGE,QAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,IAAzB;AAIA,SAAC,OAAO,CAAC,WAAD,CAAP,CAAqB,MAAtB,IAAgC,UAAU,CAAC,QAAX,EAAhC;AACD,OA3BqB,CAD1B;;;AADF,SAAK,IAAI,WAAW,GAAG,CAAvB,EAA0B,CAAC,UAAU,CAAC,MAAZ,IAAsB,WAAW,GAAG,OAAO,CAAC,MAAtE,EAA8E,WAAW,EAAzF,EAA2F;cAAlF,W;AAgCR;;AAGD,WAAO,YAAA;AACL,MAAA,OAAO,GAAG,SAAS,GAAG,IAAtB;AACD,KAFD;AAGD,GAxDD,CADG,GA0DH,KA1DJ;AA2DD","sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\n\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n *\n * Combine age and name from different sources\n *\n * ```ts\n * import { of, zip, map } from 'rxjs';\n *\n * const age$ = of(27, 25, 29);\n * const name$ = of('Foo', 'Bar', 'Beer');\n * const isDev$ = of(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\n * )\n * .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n *\n * @param sources\n * @return {Observable<R>}\n */\nexport function zip(...args: unknown[]): Observable<unknown> {\n  const resultSelector = popResultSelector(args);\n\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\n\n  return sources.length\n    ? new Observable<unknown[]>((subscriber) => {\n        // A collection of buffers of values from each source.\n        // Keyed by the same index with which the sources were passed in.\n        let buffers: unknown[][] = sources.map(() => []);\n\n        // An array of flags of whether or not the sources have completed.\n        // This is used to check to see if we should complete the result.\n        // Keyed by the same index with which the sources were passed in.\n        let completed = sources.map(() => false);\n\n        // When everything is done, release the arrays above.\n        subscriber.add(() => {\n          buffers = completed = null!;\n        });\n\n        // Loop over our sources and subscribe to each one. The index `i` is\n        // especially important here, because we use it in closures below to\n        // access the related buffers and completion properties\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n          innerFrom(sources[sourceIndex]).subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                buffers[sourceIndex].push(value);\n                // if every buffer has at least one value in it, then we\n                // can shift out the oldest value from each buffer and emit\n                // them as an array.\n                if (buffers.every((buffer) => buffer.length)) {\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\n                  // Emit the array. If theres' a result selector, use that.\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\n                  // If any one of the sources is both complete and has an empty buffer\n                  // then we complete the result. This is because we cannot possibly have\n                  // any more values to zip together.\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                    subscriber.complete();\n                  }\n                }\n              },\n              () => {\n                // This source completed. Mark it as complete so we can check it later\n                // if we have to.\n                completed[sourceIndex] = true;\n                // But, if this complete source has nothing in its buffer, then we\n                // can complete the result, because we can't possibly have any more\n                // values from this to zip together with the other values.\n                !buffers[sourceIndex].length && subscriber.complete();\n              }\n            )\n          );\n        }\n\n        // When everything is done, release the arrays above.\n        return () => {\n          buffers = completed = null!;\n        };\n      })\n    : EMPTY;\n}\n"]},"metadata":{},"sourceType":"module"}