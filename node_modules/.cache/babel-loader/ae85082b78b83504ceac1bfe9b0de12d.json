{"ast":null,"code":"import { reduce } from './reduce';\nimport { isFunction } from '../util/isFunction';\nexport function min(comparer) {\n  return reduce(isFunction(comparer) ? function (x, y) {\n    return comparer(x, y) < 0 ? x : y;\n  } : function (x, y) {\n    return x < y ? x : y;\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\operators\\min.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,UAAvB;AAEA,SAAS,UAAT,QAA2B,oBAA3B;AAgDA,OAAM,SAAU,GAAV,CAAiB,QAAjB,EAAkD;AACtD,SAAO,MAAM,CAAC,UAAU,CAAC,QAAD,CAAV,GAAuB,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAC,QAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,GAAiB,CAAjB,GAAqB,CAArB,GAAD,CAAA;AAA4B,GAA7D,GAAgE,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAC,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAD,CAAA;AAAe,GAA1F,CAAb;AACD","sourcesContent":["import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * ![](min.png)\n *\n * ## Examples\n *\n * Get the minimal value of a series of numbers\n *\n * ```ts\n * import { of, min } from 'rxjs';\n *\n * of(5, 4, 7, 2, 8)\n *   .pipe(min())\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // 2\n * ```\n *\n * Use a comparer function to get the minimal item\n *\n * ```ts\n * import { of, min } from 'rxjs';\n *\n * of(\n *   { age: 7, name: 'Foo' },\n *   { age: 5, name: 'Bar' },\n *   { age: 9, name: 'Beer' }\n * ).pipe(\n *   min((a, b) => a.age < b.age ? -1 : 1)\n * )\n * .subscribe(x => console.log(x.name));\n *\n * // Outputs\n * // 'Bar'\n * ```\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return A function that returns an Observable that emits item with the\n * smallest value.\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) < 0 ? x : y) : (x, y) => (x < y ? x : y));\n}\n"]},"metadata":{},"sourceType":"module"}