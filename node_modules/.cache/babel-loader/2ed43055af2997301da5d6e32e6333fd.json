{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\n\nvar AnimationFrameScheduler = function (_super) {\n  __extends(AnimationFrameScheduler, _super);\n\n  function AnimationFrameScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AnimationFrameScheduler.prototype.flush = function (action) {\n    this._active = true;\n    var flushId = this._scheduled;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AnimationFrameScheduler;\n}(AsyncScheduler);\n\nexport { AnimationFrameScheduler };","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\scheduler\\AnimationFrameScheduler.ts"],"names":[],"mappings":";AACA,SAAS,cAAT,QAA+B,kBAA/B;;AAEA,IAAA,uBAAA,GAAA,UAAA,MAAA,EAAA;AAA6C,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAA7C,WAAA,uBAAA,GAAA;;AAkCC;;AAjCQ,EAAA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,MAAb,EAAsC;AACpC,SAAK,OAAL,GAAe,IAAf;AAUA,QAAM,OAAO,GAAG,KAAK,UAArB;AACA,SAAK,UAAL,GAAkB,SAAlB;AAEQ,QAAA,OAAO,GAAK,KAAL,OAAP;AACR,QAAI,KAAJ;AACA,IAAA,MAAM,GAAG,MAAM,IAAI,OAAO,CAAC,KAAR,EAAnB;;AAEA,OAAG;AACD,UAAK,KAAK,GAAG,MAAM,CAAC,OAAP,CAAe,MAAM,CAAC,KAAtB,EAA6B,MAAM,CAAC,KAApC,CAAb,EAA0D;AACxD;AACD;AACF,KAJD,QAIS,CAAC,MAAM,GAAG,OAAO,CAAC,CAAD,CAAjB,KAAyB,MAAM,CAAC,EAAP,KAAc,OAAvC,IAAkD,OAAO,CAAC,KAAR,EAJ3D;;AAMA,SAAK,OAAL,GAAe,KAAf;;AAEA,QAAI,KAAJ,EAAW;AACT,aAAO,CAAC,MAAM,GAAG,OAAO,CAAC,CAAD,CAAjB,KAAyB,MAAM,CAAC,EAAP,KAAc,OAAvC,IAAkD,OAAO,CAAC,KAAR,EAAzD,EAA0E;AACxE,QAAA,MAAM,CAAC,WAAP;AACD;;AACD,YAAM,KAAN;AACD;AACF,GAhCM;;AAiCT,SAAA,uBAAA;AAAC,CAlCD,CAA6C,cAA7C,CAAA","sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}