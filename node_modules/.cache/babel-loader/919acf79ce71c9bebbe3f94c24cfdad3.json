{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return operate(function (source, subscriber) {\n    var windows = [new Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var c = count - windowSize + 1;\n\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\operators\\windowCount.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AAgEA,OAAM,SAAU,WAAV,CAAyB,UAAzB,EAA6C,gBAA7C,EAAyE;AAA5B,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,CAAA;AAA4B;;AAC7E,MAAM,UAAU,GAAG,gBAAgB,GAAG,CAAnB,GAAuB,gBAAvB,GAA0C,UAA7D;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,OAAO,GAAG,CAAC,IAAI,OAAJ,EAAD,CAAd;AACA,QAAI,MAAM,GAAa,EAAvB;AACA,QAAI,KAAK,GAAG,CAAZ;AAGA,IAAA,UAAU,CAAC,IAAX,CAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,YAAX,EAAhB;AAEA,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAS;;;;AAIP,aAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,cAAM,QAAM,GAAA,WAAA,CAAA,KAAZ;AACH,UAAA,QAAM,CAAC,IAAP,CAAY,KAAZ;AACD;;;;;;;;;;;;;AAMD,UAAM,CAAC,GAAG,KAAK,GAAG,UAAR,GAAqB,CAA/B;;AACA,UAAI,CAAC,IAAI,CAAL,IAAU,CAAC,GAAG,UAAJ,KAAmB,CAAjC,EAAoC;AAClC,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AAOD,UAAI,EAAE,KAAF,GAAU,UAAV,KAAyB,CAA7B,EAAgC;AAC9B,YAAM,QAAM,GAAG,IAAI,OAAJ,EAAf;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,QAAb;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,QAAM,CAAC,YAAP,EAAhB;AACD;AACF,KA7BqB,EA8BtB,YAAA;AACE,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AACD,MAAA,UAAU,CAAC,QAAX;AACD,KAnCqB,EAoCtB,UAAC,GAAD,EAAI;AACF,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,KAAjB,CAAuB,GAAvB;AACD;;AACD,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD,KAzCqB,EA0CtB,YAAA;AACE,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,OAAO,GAAG,IAAV;AACD,KA7CqB,CAD1B;AAiDD,GAzDa,CAAd;AA0DD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n *\n * Ignore every 3rd click event, starting from the first one\n *\n * ```ts\n * import { fromEvent, windowCount, map, skip, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3),\n *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n *\n * ```ts\n * import { fromEvent, windowCount, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll() // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of windows, which in turn are\n * Observable of values.\n */\nexport function windowCount<T>(windowSize: number, startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n\n  return operate((source, subscriber) => {\n    let windows = [new Subject<T>()];\n    let starts: number[] = [];\n    let count = 0;\n\n    // Open the first window.\n    subscriber.next(windows[0].asObservable());\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Emit the value through all current windows.\n          // We don't need to create a new window yet, we\n          // do that as soon as we close one.\n          for (const window of windows) {\n            window.next(value);\n          }\n          // Here we're using the size of the window array to figure\n          // out if the oldest window has emitted enough values. We can do this\n          // because the size of the window array is a function of the values\n          // seen by the subscription. If it's time to close it, we complete\n          // it and remove it.\n          const c = count - windowSize + 1;\n          if (c >= 0 && c % startEvery === 0) {\n            windows.shift()!.complete();\n          }\n\n          // Look to see if the next count tells us it's time to open a new window.\n          // TODO: We need to figure out if this really makes sense. We're technically\n          // emitting windows *before* we have a value to emit them for. It's probably\n          // more expected that we should be emitting the window when the start\n          // count is reached -- not before.\n          if (++count % startEvery === 0) {\n            const window = new Subject<T>();\n            windows.push(window);\n            subscriber.next(window.asObservable());\n          }\n        },\n        () => {\n          while (windows.length > 0) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        (err) => {\n          while (windows.length > 0) {\n            windows.shift()!.error(err);\n          }\n          subscriber.error(err);\n        },\n        () => {\n          starts = null!;\n          windows = null!;\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}