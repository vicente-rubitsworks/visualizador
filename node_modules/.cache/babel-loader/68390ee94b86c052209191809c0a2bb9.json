{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function window(windowBoundaries) {\n  return operate(function (source, subscriber) {\n    var windowSubject = new Subject();\n    subscriber.next(windowSubject.asObservable());\n\n    var errorHandler = function (err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    windowBoundaries.subscribe(createOperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject());\n    }, noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\operators\\window.ts"],"names":[],"mappings":"AAEA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,IAAT,QAAqB,cAArB;AA6CA,OAAM,SAAU,MAAV,CAAoB,gBAApB,EAAqD;AACzD,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AAChC,QAAI,aAAa,GAAe,IAAI,OAAJ,EAAhC;AAEA,IAAA,UAAU,CAAC,IAAX,CAAgB,aAAa,CAAC,YAAd,EAAhB;;AAEA,QAAM,YAAY,GAAG,UAAC,GAAD,EAAS;AAC5B,MAAA,aAAa,CAAC,KAAd,CAAoB,GAApB;AACA,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD,KAHD;;AAMA,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAM;AAAK,aAAA,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,aAAa,CAAE,IAAf,CAAA,KAAA,CAAA;AAA0B,KAFf,EAGtB,YAAA;AACE,MAAA,aAAa,CAAC,QAAd;AACA,MAAA,UAAU,CAAC,QAAX;AACD,KANqB,EAOtB,YAPsB,CAD1B;AAaA,IAAA,gBAAgB,CAAC,SAAjB,CACE,wBAAwB,CACtB,UADsB,EAEtB,YAAA;AACE,MAAA,aAAa,CAAC,QAAd;AACA,MAAA,UAAU,CAAC,IAAX,CAAiB,aAAa,GAAG,IAAI,OAAJ,EAAjC;AACD,KALqB,EAMtB,IANsB,EAOtB,YAPsB,CAD1B;AAYA,WAAO,YAAA;AAIL,MAAA,aAAa,KAAA,IAAb,IAAA,aAAa,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,aAAa,CAAE,WAAf,EAAA;AACA,MAAA,aAAa,GAAG,IAAhB;AACD,KAND;AAOD,GA3Ca,CAAd;AA4CD","sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, interval, window, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const sec = interval(1000);\n * const result = clicks.pipe(\n *   window(sec),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    windowBoundaries.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}