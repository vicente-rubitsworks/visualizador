{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n  return resultSelector ? pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector)) : operate(function (source, subscriber) {\n    combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);\n  });\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\operators\\combineLatest.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,6BAAlC;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,gBAAT,QAAiC,0BAAjC;AACA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,iBAAT,QAAkC,cAAlC;AAoBA,OAAM,SAAU,aAAV,GAAuB;AAAO,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAA6D;AAA7D,IAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAClC,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,CAAxC;AACA,SAAO,cAAc,GACjB,IAAI,CAAC,aAAa,CAAA,KAAb,CAAa,KAAA,CAAb,EAAa,aAAA,CAAA,EAAA,EAAA,MAAA,CAAK,IAAL,CAAA,CAAb,CAAD,EAA0D,gBAAgB,CAAC,cAAD,CAA1E,CADa,GAEjB,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,IAAA,iBAAiB,CAAA,aAAA,CAAA,CAAE,MAAF,CAAA,EAAQ,MAAA,CAAK,cAAc,CAAC,IAAD,CAAnB,CAAR,CAAA,CAAjB,CAAqD,UAArD;AACD,GAFM,CAFX;AAKD","sourcesContent":["import { combineLatestInit } from '../observable/combineLatest';\nimport { ObservableInput, ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  project: (...values: [T, ...A]) => R\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  ...sourcesAndProject: [...ObservableInputTuple<A>, (...values: [T, ...A]) => R]\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/**\n * @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8.\n */\nexport function combineLatest<T, R>(...args: (ObservableInput<any> | ((...values: any[]) => R))[]): OperatorFunction<T, unknown> {\n  const resultSelector = popResultSelector(args);\n  return resultSelector\n    ? pipe(combineLatest(...(args as Array<ObservableInput<any>>)), mapOneOrManyArgs(resultSelector))\n    : operate((source, subscriber) => {\n        combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n      });\n}\n"]},"metadata":{},"sourceType":"module"}