{"ast":null,"code":"export function createErrorClass(createImpl) {\n  var _super = function (instance) {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  var ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}","map":{"version":3,"sources":["C:\\Users\\vicen\\Documents\\React\\visualizador\\node_modules\\rxjs\\src\\internal\\util\\createErrorClass.ts"],"names":[],"mappings":"AASA,OAAM,SAAU,gBAAV,CAA8B,UAA9B,EAA8D;AAClE,MAAM,MAAM,GAAG,UAAC,QAAD,EAAc;AAC3B,IAAA,KAAK,CAAC,IAAN,CAAW,QAAX;AACA,IAAA,QAAQ,CAAC,KAAT,GAAiB,IAAI,KAAJ,GAAY,KAA7B;AACD,GAHD;;AAKA,MAAM,QAAQ,GAAG,UAAU,CAAC,MAAD,CAA3B;AACA,EAAA,QAAQ,CAAC,SAAT,GAAqB,MAAM,CAAC,MAAP,CAAc,KAAK,CAAC,SAApB,CAArB;AACA,EAAA,QAAQ,CAAC,SAAT,CAAmB,WAAnB,GAAiC,QAAjC;AACA,SAAO,QAAP;AACD","sourcesContent":["/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n"]},"metadata":{},"sourceType":"module"}